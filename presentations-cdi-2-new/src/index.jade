doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title CDI 2.0 New & Noteworthy

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h1 CDI 2.0
        h2 New & Noteworthy
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h4 Who am I?
        p.small John D. Ament
        p.small Principal Architect at Sparta Systems
        p.small CDI Expert Group Member
        p.small JMS Expert Group Member
        p.small Apache DeltaSpike PMC
        p.small Apache ActiveMQ Committer
        p.small Hammock Project creator - CDI based Microservices
        p.strong http://github.com/hammock-project

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 CDI 2.0
        p CDI 2.0 (JSR-365) has been in development for a few years now
        p In depth information can be found at
        p.strong http://cdi-spec.org/

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Other Sessions
        h3 Stop by Thursday, 2:50 in LL 20 D
        h3 How to use CDI 2.0 in <br/>a Java SE Environment

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Slide Materials
        h3 Available on my github - 
        p.strong https://github.com/johnament
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 The New
        p The New:
        ul
          li Event Enhancements
          li Java 8 Baseline
          li Enhanced Configuration Capabilities in Extensions
          li Applying interceptors to produced beans
          
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Event Enhancements
        h3 Event Ordering
        p In the past, the order of observer methods was not guaranteed.  Starting with CDI 2.0 you can add a @Priority annotation to guarantee the order, largest to smallest.
        p The default priority is javax.interceptor.Interceptor.Priority.APPLICATION + 500

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Event Enhancements
        h3 Programmatic Events
        p Prior to CDI 2.0, the only option available for programmatic events was BeanManager.fire.
        p Now you can leverage BeanManager.getEvent() to get a fully functional Event object
        p The event is typed to Object and has the @Default qualifier

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Event Enhancements
        h3 Asynchronous Events
        p While never specified in prior releases, events were always observed on the same thread as the sender.
        p CDI 2.0 provides a fireAsync method for sending async events

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Event Enhancements
        h3 Asynchronous Events
        p Firing async events is a contract - the sender and receiver have to support asynchronous calls
        p Observer methods are denoted with @ObservesAsync
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Event Enhancements
        h3 Asynchronous Events
        p Async events don't support priority
        p They will be called asynchronously with other observer methods
        p Mileage varies depending on the type of executor in use
        p Likewise, watch out for mutable events
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Event Enhancements
        h3 Asynchronous Events & Context Activation
        p Asynchronous events don't have context propagation
        p If you're firing from a JAX-RS call, the original request is lost
        p A separate request context is active within each observer method

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Java 8 Alignment
        p CDI 2.0 is heavily aligned to Java 8.  Many new features are based on Java 8 semantics, functional interfaces used heavily to write simple code, instances can be streamed.

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Java 8 Alignment
        h3 Bean Configuration
        p CDI 2.0 introduces a builder-based configuration system for portable extensions
        pre
          code.language-javascript.
            afterBeanDiscovery.addBean()
                .produceWith(instance -> new Object())
                .destroyWith((o, cc) -> {});
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Java 8 Alignment
        h3 Instance Enhancements
        p Instances now support direct streaming, to represent that they are a collection of beans
        pre
          code.language-javascript.
            instance
              .stream()
              .findFirst()
              .ifPresent(bean -> bean.doSomething());
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Java 8 Alignment
        h3 Instance Enhancements
        p As well as a positive isResolvable method - no more of..
        pre
          code.language-javascript.
            if(!instance.isAmbiguous() &&
                !instance.isUnsatisfied())
            //
            if(instance.isResolvable())

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Java 8 Alignment
        h3 Repeating Qualifiers
        p CDI now supports repeating qualifiers
        p They act in an additive fashion
        p As a result, you need to use getAnnotations

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 The Noteworthy
        p The Noteworthy:
          ul
            li Stereotypes
            li Alternatives
            li Decorators
            li Bean Discovery
            li Unmanaged Beans
            li Portable Extensions
                
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Stereotypes
        h3 Create annotations that match your needs
        p Its normal to create annotations that represent how your code is supposed to work
        p However, these annotations aren't built in
        p Makes sense, since they're meant to fit into your business domain
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Stereotypes
        p You can create a generic Component stereotype
        pre
          code.language-javascript.
            @Dependent
            @Stereotype
            @Target(TYPE)
            @Retention(RUNTIME)
            public @interface Component {}

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Stereotypes
        p Or very specific
        pre
          code.language-javascript.
            @ApplicationScoped
            @Transactional
            @Stereotype
            @Target(TYPE)
            @Retention(RUNTIME)
            public @interface Service {}
          
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Stereotypes
        p Including alternatives, and qualifiers
        pre
          code.language-javascript.
            @ApplicationScoped
            @Alternative
            @Mock
            @Stereotype
            @Target(TYPE)
            @Retention(RUNTIME)
            public @interface MockService {}
          
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Alternatives
        h3 Deployment time bean swapping
        p Alternatives are enabled per bean-archive in beans.xml
        p Replacing the bean they extend from

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Alternatives
        h3 Global Alternatives
        p Alternatives also support enablement via Priority, making them global
        p No XML changes required, they are simply active
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Decorators
        h3 Delegating to existing beans
        p Decorators are meant for delegating work to the existing class
        p While adding custom logic
        p Also supports activation via beans.xml and Priority
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Bean Discovery
        p CDI's bean discovery has gone through some radical changes in its revisions
        p CDI 1.0 required an empty/minimal beans.xml to be present for it to be considered.

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Bean Discovery
        p Java EE 7 introduces CDI 1.1 and CDI always on
        p CDI added a bean-discovery-mode to help developers control what was discovered
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Bean Discovery
        h3 Added support for 
        p all - every valid bean was created
        p annotated - bean defining annotations were required
        p none - turn off CDI for this archive
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Bean Discovery
        p CDI 2.0 introduces two new concepts for bean discovery
        p Trimmed archives, discovered all beans but removed classes that had no qualifiers, scopes, alternatives, decorators, etc

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Java SE
        p Java SE has its own rules around discovery stop by on Thursday!
        
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Unmanaged Beans
        p Sometimes you want to inject into a bean, <br/> but not actually inject that bean
        pre
          code.language-javascript.
            UnmanagedInstance&lt;MyBean&gt; instance = 
              new Unmanaged&lt;&gt;(MyBean.class)
              .newInstance();
            MyBean myBean  = instance.produce()
                .inject().postConstruct().get();
            // do some work with it
            instance.preDestroy().dispose();
          
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Unmanaged Beans
        p While this isn't a lot of code, it adds extra boiler plate.  So you can have a one time..

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Unmanaged Beans
        h3 Into a bit of syntactic sugar
        pre
          code.language-javascript.
            try(Unmanageable&lt;SomeBean&gt; unmanageable =
                new Unmanageable&lt;&gt;(SomeBean.class)) {
                SomeBean bean = unmanageable.get();
            }

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Portable Extensions
        h3 Observe CDI container start up events 
        ul
          li BeforeBeanDiscovery
          li ProcessAnnotatedType
          li AfterTypeDiscovery
          li ProcessInjectionTarget / ProcessProducer
          li ProcessInjectionPoint
          li ProcessBeanAttributes
          li ProcessBean
          li ProcessObserverMethod
          li AfterBeanDiscovery
          li AfterDeploymentValidation

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Thanks & Questions  
        
    script(src='build/build.js')
